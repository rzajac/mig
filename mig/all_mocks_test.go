// Code generated by mockery v1.0.0
package mig

import "github.com/stretchr/testify/mock"

// MockDriver is an autogenerated mock type for the Driver type
type MockDriver struct {
    mock.Mock
}

// Apply provides a mock function with given fields: _a0
func (_m *MockDriver) Apply(_a0 Migration) error {
    ret := _m.Called(_a0)

    var r0 error
    if rf, ok := ret.Get(0).(func(Migration) error); ok {
        r0 = rf(_a0)
    } else {
        r0 = ret.Error(0)
    }

    return r0
}

// Close provides a mock function with given fields:
func (_m *MockDriver) Close() error {
    ret := _m.Called()

    var r0 error
    if rf, ok := ret.Get(0).(func() error); ok {
        r0 = rf()
    } else {
        r0 = ret.Error(0)
    }

    return r0
}

// GenMigration provides a mock function with given fields: version
func (_m *MockDriver) GenMigration(version int64) ([]byte, error) {
    ret := _m.Called(version)

    var r0 []byte
    if rf, ok := ret.Get(0).(func(int64) []byte); ok {
        r0 = rf(version)
    } else {
        if ret.Get(0) != nil {
            r0 = ret.Get(0).([]byte)
        }
    }

    var r1 error
    if rf, ok := ret.Get(1).(func(int64) error); ok {
        r1 = rf(version)
    } else {
        r1 = ret.Error(1)
    }

    return r0, r1
}

// Initialize provides a mock function with given fields:
func (_m *MockDriver) Initialize() error {
    ret := _m.Called()

    var r0 error
    if rf, ok := ret.Get(0).(func() error); ok {
        r0 = rf()
    } else {
        r0 = ret.Error(0)
    }

    return r0
}

// Merge provides a mock function with given fields: _a0
func (_m *MockDriver) Merge(_a0 []Migration) error {
    ret := _m.Called(_a0)

    var r0 error
    if rf, ok := ret.Get(0).(func([]Migration) error); ok {
        r0 = rf(_a0)
    } else {
        r0 = ret.Error(0)
    }

    return r0
}

// Open provides a mock function with given fields:
func (_m *MockDriver) Open() error {
    ret := _m.Called()

    var r0 error
    if rf, ok := ret.Get(0).(func() error); ok {
        r0 = rf()
    } else {
        r0 = ret.Error(0)
    }

    return r0
}

// Revert provides a mock function with given fields: _a0
func (_m *MockDriver) Revert(_a0 Migration) error {
    ret := _m.Called(_a0)

    var r0 error
    if rf, ok := ret.Get(0).(func(Migration) error); ok {
        r0 = rf(_a0)
    } else {
        r0 = ret.Error(0)
    }

    return r0
}

// Version provides a mock function with given fields:
func (_m *MockDriver) Version() (int64, error) {
    ret := _m.Called()

    var r0 int64
    if rf, ok := ret.Get(0).(func() int64); ok {
        r0 = rf()
    } else {
        r0 = ret.Get(0).(int64)
    }

    var r1 error
    if rf, ok := ret.Get(1).(func() error); ok {
        r1 = rf()
    } else {
        r1 = ret.Error(1)
    }

    return r0, r1
}
