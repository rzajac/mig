package mig

import (
    "bytes"
    "fmt"
    "io/ioutil"
    "path"
    "text/template"
    "time"

    "github.com/pkg/errors"
)

// A Mig is a migrations manager.
type Mig struct {
    cfg    Configurator
    prv    DriverProvider
    migDir string
}

// NewMig returns new Mig instance.
func NewMig(cfg Configurator) (*Mig, error) {
    m := &Mig{
        cfg: cfg,
        prv: NewProvider(cfg),
        migDir: path.Join(cfg.BaseDir(), "migrations"),
    }
    return m, nil
}

// NewMigFromConfig instantiates new Mig based on provided config path.
func NewMigFromConfig(path string) (*Mig, error) {
    cfg, err := NewConfigLoader().Load(path)
    if err != nil {
        return nil, err
    }
    return NewMig(cfg)
}

// NewMigration creates new migration file for given configuration name.
func (m *Mig) NewMigration(name string) error {
    drv, err := m.prv.Driver(name)
    if err != nil {
        return err
    }
    if err := m.ensure(); err != nil {
        return err
    }
    version := time.Now().UnixNano()
    if err := drv.Creator().CreateMigration(version); err != nil {
        return err
    }
    return nil
}

// ensure everything is ready to create migration files.
func (m *Mig) ensure() error {
    if err := checkCreateDir(m.migDir); err != nil {
        return err
    }
    main := path.Join(m.migDir, "main.go")
    fmt.Println(main)
    ok, err := fileExists(main)
    if err != nil {
        return err
    }
    if !ok {
        var buf bytes.Buffer
        if err := mainTpl.Execute(&buf, nil); err != nil {
            return errors.WithStack(err)
        }
        if err := ioutil.WriteFile(main, buf.Bytes(), 0666); err != nil {
            return errors.WithStack(err)
        }
    }
    return nil
}

var mainTpl = template.Must(template.New("mig-mysqlDriver-struct-tpl").Parse(`package main

import (
    "github.com/rzajac/mig/cmd/mig/cmd"
)

// ======================= DO NOT EDIT THIS FILE =======================

func main() {
    cmd.Execute()
}
`))
